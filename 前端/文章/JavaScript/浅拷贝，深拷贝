[浅拷贝于深拷贝](
https://github.com/ljianshu/Blog/issues/5)

### 深拷贝、浅拷贝
深拷贝和浅拷贝是只针对 Object 和 Array 这样的引用数据类型的。

示意图大致如下：
![090e6bf2b098318c911a230dbd15e2c1.png](en-resource://database/588:1)

**浅拷贝只复制指向某个对象的指针**，而不复制对象本身，新旧对象还是共享同一块内存。

**深拷贝会另外创造一个一模一样的对象**，新对象跟原对象不共享内存，互相独立。

#### 1. 赋值和浅拷贝的区别
* 把一个对象赋值给一个新的变量时，**赋的是该对象在栈中的地址，而不是堆中的数据**。等价于两个对象指向的时同一个存储空间内，两个对象是联动的。
* 浅拷贝是按位拷贝对象，他会创建一个新对象。如果属性是基本类型，拷贝的就是基本类型的值；如果属性是内存地址(引用类型)，拷贝的就是内存地址。

栗子：
```js
//对象的赋值
var obj1 = {
    'name': '章',
    'test': [1, [2, 3], [4, 5]],
}
var obj2 = obj1;
obj2.name = "lisa";
obj2.test[1] = ["二","三"];
```
![deba43e3305de61eab86282e0f6efbd3.png](en-resource://database/592:1)

```js
// 浅拷贝
 var obj1 = {
    'name' : 'zhangsan',
    'age' :  '18',
    'language' : [1,[2,3],[4,5]],
};
 var obj3 = shallowCopy(obj1);
 obj3.name = "lisi";
 obj3.language[1] = ["二","三"];
 
 function shallowCopy(obj) {
    var o1 = {};
    for(var prop in obj) {
        if (src.hasOwnProperty(prop)) {
            o1[prop] = obj[prop];
        }
    }
    return o1;
 }
```
![ccd697ab63d077dcbc627839d241be10.png](en-resource://database/594:1)

obj1 是原始数据，obj2是赋值操作得到的，obj3浅拷贝得到，区别如下表：

| -- | 和原数据是否指向同一对象 | 第一层数据为基本数据  | 原数据中包含子对象 |
| --- | --- | --- | --- |
| 赋值  | 是  | 改变会使原数据一同改变 | 改变会使原数据一同改变  |
| 浅拷贝 | 否 | 改变**不会**使原数据一同改变 | 改变会使原数据一同改变 |
| 深拷贝 | 否 | 改变**不会**使原数据一同改变 | 改变**不会**使原数据一同改变 |

#### 2. 实现浅拷贝

**1). Object.assign()**

Object.assign()方法可以把任意多个的源对象自身的可枚举属性拷贝给目标对象，然后返回目标对象。凡是进行的浅拷贝，拷贝的是对象的属性的引用，而不是对象本身。

```js
var obj = { a: {a: "kobe", b: 39} };
var initalObj = Object.assign({}, obj);
initalObj.a.a = "wade";
console.log(obj.a.a);  // wade
```

**但当object只有一层的时候，是深拷贝**
```js
let obj = {username: 'kobe' };
let obj2 = Object.assign({},obj);
obj2.username = 'wade';
console.log(obj);//{username: "kobe"}
```

**2). Array.prototype.concat()**
```js
let arr = [1, 3, {
    username: 'kom'
}]
let arr2 = arr.concat();
arr2[2].username = 'wade';
conosle.log(arr)
```
修改新对象会改到原对象：
![f353d5b33dcd29de560190d3d50de681.png](en-resource://database/596:2)

**3). Array.prototype.slice()**
```js
let arr = [1, 3, {
    username: 'kom'
}]
let arr2 = arr.slice();
arr2[2].username = 'wade';
conosle.log(arr)
```
修改新对象会改到原对象：
![f353d5b33dcd29de560190d3d50de681.png](en-resource://database/596:2)

**补充说明：** Aray的slice和concat方法不修改原数组，只会返回一个浅复制了原数组中的元素的一个新数组。


原数组的元素会按照下述规则拷贝：
* 该元素是个对象引用(不是实际的对象)，slice 会拷贝这个对象引用到新的数组里。两个对象引用都引用了同一个对象。如果被引用的对象发生改变，则新的和原来的数组中的这个元素也会发生改变。
* 字符串、数字及布尔值来说（不是 String、Number 或者 Boolean 对象），slice 会拷贝这些值到新的数组里。在别的数组里修改这些字符串或数字或是布尔值，将不会影响另一个数组

#### 3. 实现深拷贝

**1). JSON.parse(JSON.stringify())**
```js
let arr = [1, 3, {
    username: ' kobe'
}];
let arr4 = JSON.parse(JSON.stringify(arr));
arr4[2].username = 'duncan'; 
console.log(arr, arr4
```
![12fdcebd8488a451eaa9bf8bf11cf7ef.png](en-resource://database/598:1)

原理：用 JSON.stringify 将对象转换成 JSON 字符串，再用 JSON.parse() 把字符串解析成对象，新对象会开辟新的栈，实现深拷贝。

**虽然可以实现数组或对象的深拷贝，但不能处理函数**
```js
let arr = [1, 3, {
    username: ' kobe'
},function(){}];
let arr4 = JSON.parse(JSON.stringify(arr));
arr4[2].username = 'duncan'; 
console.log(arr, arr4)
```
![9436fd3c78b1c8b992e2ea877292bf89.png](en-resource://database/600:1)
这是因为 JSON.stringify() 方法是将一个 JavaScript 值(对象或者数组)转换一个JSON字符串，不能接受函数

**2). 手写递归方法**
递归方法实现深度克隆原理： 遍历对象、数组知道里边都是基本数据类型，然后再去复制，就是深度拷贝。

```js
//定义检测数据类型的功能函数
function checkedType(target) {
  return Object.prototype.toString.call(target).slice(8, -1);
}

//实现深度克隆---对象/数组
function clone(target) {
    //判断拷贝的数据类型
    //初始化变量result 成为最终克隆的数据
    let result,
    targetType = checkedType(target);
    
    if (targetType === 'Object') {
        result = {};
    } else if (targetType === 'Array') {
        result = [];
    } else {
        return target;
    }
    
    //遍历目标数据
    for (let i in target) {
        //获取遍历数据结构的每一项值。
        let value = target[i];
        
        //判断目标结构里的每一值是否存在对象/数组
        if (checkedType(value) === 'Object' || checkedType(value) === 'Array') {
            //对象/数组里嵌套了对象/数组
            //继续遍历获取到value值
            result[i] = clone(value);
        } else {
            //获取到value值是基本的数据类型或者是函数。
            result[i] = value;
        }
    }
    return result;
}
```

**3). 函数库lodash**
该函数库也有提供_.cloneDeep用来做 Deep Copy
```js
var _ = require('lodash');
var obj1 = {
    a: 1,
    b: { f: { g: 1 } },
    c: [1, 2, 3]
};
var obj2 = _.cloneDeep(obj1);
console.log(obj1.b.f === obj2.b.f);
// false
```
