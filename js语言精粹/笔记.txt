0.NaN是一个数值，它表示一个不能产生正常结果的运算结果。NaN不等于任何值，包括它自己，isNaN(number)检测NaN
  Infinity 类似 正无穷大

1.Javascript在被创建的时候，Unicode是一个16位的字符集，所以JS钟的所有字符都是16位

2.两个包含着完全相同的字符且字符顺序也相同的字符串被认为是相同的字符串，'c'+'a'+'t'=='cat' 是true

3.条件语句（if 和 switch）
  循环语句（while、for 和 do）
  强制跳转语句（break、return 和 throw）

  下面的值被当作假：false、null、undefined、空字符串''、数字0、数字NAN

4.for（variable in object） block 在每次循环中，object的下一个属性名字符串被赋值给variable,用object.hasOwnProperty(variable)来确定这个属性名是该   对象的成员，还是来自原型链。 
  for (myvar in obj) {
    if (obj.hasOwnProperty(myvar)) {
      ...
    } 
  }

5. return 和 break
  return: 导致从函数中提前返回。可以指定要被返回的值，若没有指定返回表达式，那么返回值是undefined；js不允许在return关键字和表达式之间换行
  break: 使程序退出一个循环语句或switch语句，它可以指定一个可选的标签，那退出的就是带该标签的语句；js不允许在break关键字和标签之间换行

6.typeof运算符产生的值有'number','string','boolean','undefined','function'和’object'。如果运算数是一个数组或null，那么结果是object。

7.JS的简单数据类型包括：数字、字符串、布尔值、null、undefined。其他所有的值都是对象（可变的键控组合）
  对象：属性的容器；属性拥有名字(包括空字符串在内的任意字符串)和值(除undefined值之外的任何值);
  JS内的对象是无类型(class-free)的，对新属性的名字和属性的值没有限制，对象可以包含其他对象。

8.函数就是对象。
  对象字面量产生的对象连接到Object.prototype；函数对象连接到Function.prototype(该原型对象本身连接到Object.prototype)

9.4种调用模式：
  1).方法调用模式：当一个函数被保存为对象的一个属性时，称之为一个方法。当一个方法被调用时，this被绑定到该对象。xxx.xx()
  2).函数调用模式: 当一个函数并非一个对象的属性时，被当做一个函数调用
  3).构造器调用模式
  4).apply调用模式
  
10.作用域: 控制着变量与参数的可见性及生命周期--减少了名称的冲突，提供了自动内存管理
           定义在函数中的参数和变量，函数外部不可见，内部任何地方可见
  
